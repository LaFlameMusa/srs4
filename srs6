import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  Future<bool> isAuthenticated() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getBool('isAuthenticated') ?? false;
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<bool>(
      future: isAuthenticated(),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return MaterialApp(home: Scaffold(body: Center(child: CircularProgressIndicator())));
        }
        if (snapshot.data == true) {
          // Пользователь уже аутентифицирован
          return MaterialApp(home: DataPage(language: 'English')); // Поменяйте язык по вашему усмотрению
        }
        // Пользователь не аутентифицирован
        return MaterialApp(home: LanguageSelectionPage());
      },
    );
  }
}

class LanguageSelectionPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Select Language')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(onPressed: () => Navigator.push(context, MaterialPageRoute(builder: (_) => AuthenticationPage(language: 'English'))), child: Text('English')),
            ElevatedButton(onPressed: () => Navigator.push(context, MaterialPageRoute(builder: (_) => AuthenticationPage(language: 'Русский'))), child: Text('Русский')),
            ElevatedButton(onPressed: () => Navigator.push(context, MaterialPageRoute(builder: (_) => AuthenticationPage(language: 'Қазақ'))), child: Text('Қазақ')),
          ],
        ),
      ),
    );
  }
}

class AuthenticationPage extends StatefulWidget {
  final String language;
  const AuthenticationPage({Key? key, required this.language}) : super(key: key);

  @override
  _AuthenticationPageState createState() => _AuthenticationPageState();
}

class _AuthenticationPageState extends State<AuthenticationPage> {
  final _formKey = GlobalKey<FormState>();
  String _email = '', _password = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Registration - ${widget.language}')),
      body: Center(
        child: Form(
          key: _formKey,
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              TextFormField(
                decoration: InputDecoration(labelText: 'Email'),
                validator: (value) => value != null && value.contains('@') ? null : 'Enter a valid email',
                onSaved: (value) => _email = value!,
              ),
              TextFormField(
                decoration: InputDecoration(labelText: 'Password'),
                obscureText: true,
                validator: (value) => value == '12345' ? null : 'Incorrect password',
                onSaved: (value) => _password = value!,
              ),
              ElevatedButton(
                onPressed: () async {
                  if (_formKey.currentState!.validate()) {
                    _formKey.currentState!.save();
                    final prefs = await SharedPreferences.getInstance();
                    await prefs.setBool('isAuthenticated', true);
                    Navigator.pushReplacement(context, MaterialPageRoute(builder: (_) => DataPage(language: widget.language)));
                  }
                },
                child: Text('Register'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class DataPage extends StatelessWidget {
  final String language;
  const DataPage({Key? key, required this.language}) : super(key: key);

  Future<void> signOut(BuildContext context) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove('isAuthenticated');
    Navigator.of(context).pushAndRemoveUntil(MaterialPageRoute(builder: (_) => LanguageSelectionPage()), (Route<dynamic> route) => false);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Data Page - $language'),
        actions: [
          IconButton(
            icon: Icon(Icons.exit_to_app),
            onPressed: () => signOut(context),
          ),
        ],
      ),
      body: FutureBuilder<List<dynamic>>(
        future: fetchData(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          } else if (snapshot.hasError) {
            return Center(child: Text('Error: ${snapshot.error}'));
          }
          return ListView.builder(
            itemCount: snapshot.data!.length,
            itemBuilder: (context, index) {
              return ListTile(
                title: Text(snapshot.data![index]['title']),
                subtitle: Text(snapshot.data![index]['body']),
              );
            },
          );
        },
      ),
    );
  }

  Future<List<dynamic>> fetchData() async {
    final response = await http.get(Uri.parse('https://jsonplaceholder.typicode.com/posts'));
    if (response.statusCode == 200) {
      return json.decode(response.body);
    } else {
      throw Exception('Failed to load data');
    }
  }
}
